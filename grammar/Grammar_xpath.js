/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,60],$V1=[1,7],$V2=[1,23],$V3=[1,24],$V4=[5,10,18,59,121,122,123],$V5=[5,10,13,18,20,59,91,121,122,123],$V6=[5,10,13,18,20,23,59,91,121,122,123],$V7=[5,10,13,18,20,23,26,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$V8=[5,10,13,18,20,23,26,33,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$V9=[5,10,13,18,20,23,26,33,35,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$Va=[5,10,13,18,20,23,26,33,35,38,39,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$Vb=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$Vc=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$Vd=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$Ve=[5,10,13,18,20,23,26,33,35,38,39,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],$Vf=[1,90],$Vg=[1,136],$Vh=[1,65],$Vi=[1,66],$Vj=[1,104],$Vk=[1,105],$Vl=[1,106],$Vm=[1,107],$Vn=[1,108],$Vo=[1,109],$Vp=[1,110],$Vq=[1,111],$Vr=[1,103],$Vs=[1,97],$Vt=[1,98],$Vu=[1,99],$Vv=[1,100],$Vw=[1,101],$Vx=[1,102],$Vy=[1,88],$Vz=[1,135],$VA=[1,116],$VB=[1,96],$VC=[1,113],$VD=[1,114],$VE=[1,89],$VF=[1,91],$VG=[1,115],$VH=[1,93],$VI=[1,117],$VJ=[1,129],$VK=[1,133],$VL=[1,132],$VM=[1,134],$VN=[1,131],$VO=[1,130],$VP=[5,10,13,17,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$VQ=[5,10,13,17,18,20,23,26,33,35,42,43,44,45,49,53,59,66,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$VR=[5,10,13,17,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,66,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$VS=[5,10,13,17,18,20,23,26,33,35,38,39,42,43,44,45,49,53,66,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$VT=[5,10,13,17,18,20,23,26,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$VU=[5,10,13,17,18,20,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$VV=[5,10,13,17,18,20,23,26,33,35,42,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$VW=[1,174],$VX=[1,173],$VY=[2,136],$VZ=[1,180],$V_=[1,181],$V$=[1,179],$V01=[13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V11=[1,192],$V21=[1,193],$V31=[1,190],$V41=[1,204],$V51=[1,214],$V61=[5,9,10,13,17,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V71=[5,10,13,17,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V81=[1,222],$V91=[5,10,13,18,20,23,26,59,91,121,122,123],$Va1=[1,240],$Vb1=[1,241],$Vc1=[1,242],$Vd1=[1,237],$Ve1=[1,243],$Vf1=[1,227],$Vg1=[1,230],$Vh1=[1,257],$Vi1=[5,10,13,17,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$Vj1=[17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$Vk1=[2,122],$Vl1=[5,9,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123,124],$Vm1=[13,18],$Vn1=[42,93,99,110,113,167,168,169,170,171,173],$Vo1=[2,217],$Vp1=[13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$Vq1=[13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$Vr1=[13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,113,120,121,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$Vs1=[13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,113,120,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XPath":4,"EOF":5,"Expr":6,"FunctionBody":7,"EnclosedExpr":8,"t_llave_izquierda":9,"t_llave_derecha":10,"ExprSingle":11,"Expr_recursivo":12,"t_coma":13,"IfExpr":14,"OrExpr":15,"t_if":16,"t_parentesis_izquierdo":17,"t_parentesis_derecho":18,"t_then":19,"t_else":20,"AndExpr":21,"OrExpr_recursivo":22,"t_or":23,"ComparisonExpr":24,"AndExpr_recursivo":25,"t_and":26,"StringConcatExpr":27,"ValueComp":28,"GeneralComp":29,"NodeComp":30,"RangeExpr":31,"StringConcatExpr_recursivo":32,"t_barra":33,"AdditiveExpr":34,"t_to":35,"MultiplicativeExpr":36,"AdditiveExpr_recursivo":37,"t_suma":38,"t_resta":39,"UnionExpr":40,"MultiplicativeExpr_recursivo":41,"t_multiplicacion":42,"t_div":43,"t_idiv":44,"t_mod":45,"IntersectExceptExpr":46,"InstanceofExpr":47,"TreatExpr":48,"t_instance":49,"t_of":50,"SequenceType":51,"CastableExpr":52,"t_treat":53,"t_as":54,"CastExpr":55,"ArrowExpr":56,"UnaryExpr":57,"ArrowExpr_recursivo":58,"t_igual":59,"t_mayor_que":60,"ArrowFunctionSpecifier":61,"ArgumentList":62,"UnaryExpr_recursivo":63,"ValueExpr":64,"SimpleMapExpr":65,"t_diferente":66,"t_menor_que":67,"t_eq":68,"t_ne":69,"t_lt":70,"t_le":71,"t_gt":72,"t_ge":73,"t_is":74,"PathExpr":75,"SimpleMapExpr_recursivo":76,"t_diagonal":77,"t_doble_diagonal":78,"RelativePathExpr_recursivo":79,"RelativePathExpr":80,"StepExpr":81,"PostfixExpr":82,"AxisStep":83,"ReverseStep":84,"PredicateList":85,"ForwardStep":86,"ForwardAxis":87,"NodeTest":88,"AbbrevForwardStep":89,"t_child":90,"t_dos_puntos":91,"t_descendant":92,"t_attribute":93,"t_self":94,"t_descendant-or-self":95,"t_following-sibling":96,"t_following":97,"t_namespace":98,"t_arroba":99,"ReverseAxis":100,"AbbrevReverseStep":101,"t_parent":102,"t_ancestor":103,"t_preceding_sibling":104,"t_preceding":105,"t_ancestor_or_self":106,"t_doble_punto":107,"KindTest":108,"NameTest":109,"StringLiteral":110,"Wildcard":111,"NCName":112,"t_node":113,"PrimaryExpr":114,"PostfixExpr_recursivo":115,"Predicate":116,"Lookup":117,"Argument":118,"ArgumentList_recursivo":119,"t_corchete_izquierdo":120,"t_comilla":121,"t_corchete_derecho":122,"t_comillas":123,"t_interrogacion":124,"KeySpecifier":125,"IntegerLiteral":126,"ParenthesizedExpr":127,"EQName":128,"VarRef":129,"Literal":130,"ContextItemExpr":131,"FunctionItemExpr":132,"MapConstructor":133,"ArrayConstructor":134,"UnaryLookup":135,"NumericLiteral":136,"DecimalLiteral":137,"t_dolar":138,"VarName":139,"t_punto":140,"ArgumentPlaceholder":141,"InlineFunctionExpr":142,"t_function":143,"t_map":144,"MapConstructorEntry":145,"MapConstructor_recursivo":146,"SquareArrayConstructor":147,"CurlyArrayConstructor":148,"SquareArrayConstructor_recursivo":149,"t_array":150,"t_empty-sequence":151,"ItemType":152,"OccurrenceIndicator":153,"t_item":154,"FunctionTest":155,"MapTest":156,"ArrayTest":157,"ParenthesizedItemType":158,"DocumentTest":159,"ElementTest":160,"AttributeTest":161,"PITest":162,"CommentTest":163,"TextTest":164,"NamespaceNodeTest":165,"AnyKindTest":166,"t_document-node":167,"t_text":168,"t_comment":169,"t_namespace-node":170,"t_processing-instruction":171,"AttribNameOrWildcard":172,"t_element":173,"AnyFunctionTest":174,"TypedFunctionTest":175,"TypedFunctionTest_recursivo":176,"AnyArrayTest":177,"TypedArrayTest":178,"QName":179,"PrefixedName":180,"UnprefixedName":181,"Prefix":182,"LocalPart":183,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"t_llave_izquierda",10:"t_llave_derecha",13:"t_coma",16:"t_if",17:"t_parentesis_izquierdo",18:"t_parentesis_derecho",19:"t_then",20:"t_else",23:"t_or",26:"t_and",33:"t_barra",35:"t_to",38:"t_suma",39:"t_resta",42:"t_multiplicacion",43:"t_div",44:"t_idiv",45:"t_mod",49:"t_instance",50:"t_of",53:"t_treat",54:"t_as",59:"t_igual",60:"t_mayor_que",66:"t_diferente",67:"t_menor_que",68:"t_eq",69:"t_ne",70:"t_lt",71:"t_le",72:"t_gt",73:"t_ge",74:"t_is",77:"t_diagonal",78:"t_doble_diagonal",90:"t_child",91:"t_dos_puntos",92:"t_descendant",93:"t_attribute",94:"t_self",95:"t_descendant-or-self",96:"t_following-sibling",97:"t_following",98:"t_namespace",99:"t_arroba",102:"t_parent",103:"t_ancestor",104:"t_preceding_sibling",105:"t_preceding",106:"t_ancestor_or_self",107:"t_doble_punto",110:"StringLiteral",113:"t_node",120:"t_corchete_izquierdo",121:"t_comilla",122:"t_corchete_derecho",123:"t_comillas",124:"t_interrogacion",126:"IntegerLiteral",128:"EQName",137:"DecimalLiteral",138:"t_dolar",140:"t_punto",143:"t_function",144:"t_map",150:"t_array",151:"t_empty-sequence",154:"t_item",167:"t_document-node",168:"t_text",169:"t_comment",170:"t_namespace-node",171:"t_processing-instruction",173:"t_element"},
productions_: [0,[3,2],[4,1],[7,1],[8,3],[8,2],[6,2],[12,1],[12,2],[12,0],[11,1],[11,1],[14,8],[15,2],[22,1],[22,2],[22,0],[21,2],[25,1],[25,2],[25,0],[24,3],[24,3],[24,3],[24,1],[27,2],[32,1],[32,3],[32,2],[32,0],[31,3],[31,1],[34,2],[37,1],[37,2],[37,2],[37,0],[36,2],[41,1],[41,2],[41,2],[41,2],[41,2],[41,0],[40,1],[46,1],[47,4],[47,1],[48,4],[48,1],[52,1],[55,1],[56,2],[58,1],[58,4],[58,0],[57,2],[63,1],[63,1],[63,1],[63,0],[64,1],[29,1],[29,2],[29,1],[29,2],[29,1],[29,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,1],[30,2],[30,2],[65,2],[76,1],[76,2],[76,0],[75,1],[75,1],[75,1],[79,2],[79,1],[80,0],[80,2],[80,2],[80,1],[81,1],[81,1],[83,2],[83,2],[86,2],[86,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[89,2],[89,1],[84,2],[84,1],[100,3],[100,3],[100,3],[100,3],[100,3],[101,1],[101,1],[88,1],[88,1],[109,1],[109,1],[111,1],[111,3],[111,3],[111,2],[111,3],[82,2],[115,1],[115,1],[115,1],[115,1],[115,0],[62,4],[62,2],[119,1],[119,2],[119,0],[85,2],[85,0],[116,7],[116,7],[116,7],[116,7],[116,3],[116,4],[116,8],[116,8],[116,8],[116,8],[116,8],[116,8],[116,8],[116,8],[117,2],[125,1],[125,1],[125,1],[125,1],[61,1],[61,1],[61,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[130,1],[130,1],[136,1],[136,1],[129,2],[139,1],[127,3],[127,2],[131,1],[118,1],[118,1],[141,1],[132,1],[142,6],[142,4],[133,5],[133,3],[146,1],[146,2],[146,0],[145,3],[134,1],[134,1],[147,4],[147,2],[149,1],[149,2],[149,0],[148,2],[135,2],[51,3],[51,2],[51,1],[153,1],[153,1],[153,1],[152,1],[152,3],[152,1],[152,1],[152,1],[152,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[166,3],[159,4],[159,3],[164,3],[163,3],[165,3],[162,4],[162,3],[161,4],[161,3],[172,1],[160,3],[155,1],[155,1],[174,4],[175,7],[175,5],[176,1],[176,2],[176,0],[156,4],[157,1],[157,1],[177,4],[178,4],[158,3],[179,1],[179,1],[179,1],[180,3],[181,1],[182,1],[183,1],[112,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        var root = new AST_XPATH($$[$0-1]);
        return root; 
    
break;
case 2:
this.$ = new Expresion($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 3: case 56: case 89: case 159: case 160: case 161: case 163: case 164: case 165: case 166: case 247: case 248: case 249: case 250:
 this.$ = $$[$0]; 
break;
case 4:
 this.$ = $$[$0-1]; 
break;
case 84:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 85:
 this.$ = [$$[$0]]; 
break;
case 87: case 88:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103:
 this.$ = new Axes($$[$0-2]+$$[$0-1]+$$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
 this.$ = ".."; 
break;
case 162:
 this.$ = "."; 
break;
case 175:
this.$ = new Nodo($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [o([5,13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{3:1,4:2,6:3,11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,16:$V1,38:$V2,39:$V3}),{1:[3]},{5:[1,25]},{5:[2,2]},o($V4,[2,9],{12:26,13:[1,27]}),o($V5,[2,10]),o($V5,[2,11]),{17:[1,28]},o($V5,[2,16],{22:29,23:[1,30]}),o($V6,[2,20],{25:31,26:[1,32]}),o([5,10,13,18,20,23,26,91,121,122,123],[2,24],{28:33,29:34,30:35,59:[1,42],60:[1,45],66:[1,43],67:[1,44],68:[1,36],69:[1,37],70:[1,38],71:[1,39],72:[1,40],73:[1,41],74:[1,46]}),o($V7,[2,29],{32:47,33:[1,48]}),o($V8,[2,31],{35:[1,49]}),o($V9,[2,36],{37:50,38:[1,51],39:[1,52]}),o($Va,[2,43],{41:53,42:[1,54],43:[1,55],44:[1,56],45:[1,57]}),o($Vb,[2,44]),o($Vb,[2,45]),o($Vb,[2,47],{49:[1,58]}),o($Vc,[2,49],{53:[1,59]}),o($Vd,[2,50]),o($Vd,[2,51]),o([5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,60,66,67,68,69,70,71,72,73,74,91,121,122,123],[2,55],{58:60,59:[1,61]}),o($Ve,[2,57],{64:62,65:63,75:64,79:67,80:68,81:69,82:70,83:71,114:72,84:73,86:74,130:75,129:76,127:77,131:78,132:79,133:80,134:81,135:82,100:83,101:84,87:85,89:86,136:87,142:92,147:94,148:95,88:112,108:118,109:119,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,111:128,112:137,17:$Vf,42:$Vg,77:$Vh,78:$Vi,90:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,110:$Vy,113:$Vz,120:$VA,124:$VB,126:$VC,137:$VD,138:$VE,140:$VF,143:$VG,144:$VH,150:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO}),o($VP,[2,58]),o($VP,[2,59]),{1:[2,1]},o($V4,[2,6]),o([5,10,17,18,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:138,16:$V1,38:$V2,39:$V3}),o([13,17,18,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:139,16:$V1,38:$V2,39:$V3}),o($V5,[2,13]),o([5,10,13,17,18,20,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,21:140,38:$V2,39:$V3}),o($V6,[2,17]),o([5,10,13,17,18,20,23,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,24:141,38:$V2,39:$V3}),o($VQ,$V0,{31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,27:142,38:$V2,39:$V3}),o($VQ,$V0,{31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,27:143,38:$V2,39:$V3}),o($VQ,$V0,{31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,27:144,38:$V2,39:$V3}),o($VR,[2,68]),o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,62]),{59:[1,145]},o($VS,[2,64],{59:[1,146],67:[1,147]}),o($VS,[2,66],{59:[1,148],60:[1,149]}),o($VR,[2,74]),o($V7,[2,25]),o($VT,$V0,{34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,31:151,33:[1,150],38:$V2,39:$V3}),o([5,10,13,17,18,20,23,26,33,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,121,122,123,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,34:152,38:$V2,39:$V3}),o($V9,[2,32]),o($VU,$V0,{40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,36:153,38:$V2,39:$V3}),o($VU,$V0,{40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,36:154,38:$V2,39:$V3}),o($Va,[2,37]),o($VV,$V0,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:155,38:$V2,39:$V3}),o($VV,$V0,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:156,38:$V2,39:$V3}),o($VV,$V0,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:157,38:$V2,39:$V3}),o($VV,$V0,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:158,38:$V2,39:$V3}),{50:[1,159]},{54:[1,160]},o($Vd,[2,52]),{60:[1,161]},o($Vd,[2,56]),o($Vd,[2,61]),o([5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,67,68,69,70,71,72,73,74,91,121,122,123],[2,80],{76:162,66:[1,163]}),o($Vd,[2,81],{82:70,83:71,114:72,84:73,86:74,130:75,129:76,127:77,131:78,132:79,133:80,134:81,135:82,100:83,101:84,87:85,89:86,136:87,142:92,147:94,148:95,88:112,108:118,109:119,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,111:128,112:137,81:164,17:$Vf,90:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,110:$Vy,113:$Vz,120:$VA,124:$VB,126:$VC,137:$VD,138:$VE,140:$VF,143:$VG,144:$VH,150:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO}),o($Ve,[2,82],{82:70,83:71,114:72,84:73,86:74,130:75,129:76,127:77,131:78,132:79,133:80,134:81,135:82,100:83,101:84,87:85,89:86,136:87,142:92,147:94,148:95,88:112,108:118,109:119,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,111:128,112:137,81:165,17:$Vf,42:$Vg,90:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,110:$Vy,113:$Vz,120:$VA,124:$VB,126:$VC,137:$VD,138:$VE,140:$VF,143:$VG,144:$VH,150:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO}),o($Ve,[2,83],{81:69,82:70,83:71,114:72,84:73,86:74,130:75,129:76,127:77,131:78,132:79,133:80,134:81,135:82,100:83,101:84,87:85,89:86,136:87,142:92,147:94,148:95,88:112,108:118,109:119,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,111:128,112:137,80:166,17:$Vf,42:$Vg,77:[1,167],78:[1,168],90:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,110:$Vy,113:$Vz,120:$VA,124:$VB,126:$VC,137:$VD,138:$VE,140:$VF,143:$VG,144:$VH,150:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO}),o($VP,[2,85]),o($VP,[2,89]),o($VP,[2,90]),o($VP,[2,91]),o([5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,121,122,123,126,137,138,140,143,144,150,167,168,169,170,171,173],[2,129],{115:169,116:170,62:171,117:172,17:$VW,120:$VX,124:[1,175]}),o($VP,$VY,{85:176}),o($VP,$VY,{85:177}),o($VP,[2,159]),o($VP,[2,160]),o($VP,[2,161]),o($VP,[2,162]),o($VP,[2,163]),o($VP,[2,164]),o($VP,[2,165]),o($VP,[2,166]),{42:$Vg,88:178,93:$VZ,99:$V_,108:118,109:119,110:$V$,111:128,112:137,113:$Vz,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO},o($VP,[2,107]),{42:$Vg,88:182,93:$VZ,99:$V_,108:118,109:119,110:$V$,111:128,112:137,113:$Vz,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO},o($VP,[2,95]),o($VP,[2,167]),o($VP,[2,168]),{128:[1,184],139:183},o($V01,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:185,16:$V1,18:[1,186],38:$V2,39:$V3}),o($VP,[2,175]),o($VP,[2,179]),{9:[1,187]},o($VP,[2,188]),o($VP,[2,189]),{17:$Vf,42:$V11,110:$V21,112:189,125:188,126:$V31,127:191},{91:[1,194]},{91:[1,195]},{91:[1,196]},{91:[1,197]},{91:[1,198]},o($VP,[2,113]),o([5,10,13,17,18,20,23,26,33,35,38,39,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,91,92,94,95,96,97,98,102,103,104,105,106,107,120,121,122,123,124,126,137,138,140,143,144,150],[2,114],{108:118,109:119,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,111:128,112:137,88:199,42:[1,200],93:$VZ,99:$V_,110:$V$,113:$Vz,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO}),{91:[1,201]},{91:[1,202]},{17:$V41,91:[1,203]},{91:[1,205]},{91:[1,206]},{91:[1,207]},{91:[1,208]},{91:[1,209]},o($VP,[2,105]),o($VP,[2,169]),o($VP,[2,170]),{17:[1,210]},o($V01,$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:211,16:$V1,38:$V2,39:$V3,122:[1,212]}),{8:213,9:$V51},o($VP,[2,115]),o($VP,[2,116]),o($V61,[2,209]),o($V61,[2,210]),o($V61,[2,211]),o($V61,[2,212]),o($V61,[2,213]),o($V61,[2,214]),o($V61,[2,215]),o($V61,[2,216]),o($VP,[2,118]),{17:[1,215]},{17:[1,216]},{17:[1,217]},{17:[1,218]},{17:[1,219]},{17:[1,220]},{17:[1,221]},o($V71,[2,119],{91:$V81}),{91:[1,223]},o($V4,[2,8]),{18:[1,224]},o($V5,[2,15]),o($V6,[2,19]),o($V91,[2,21]),o($V91,[2,22]),o($V91,[2,23]),o($VR,[2,63]),o($VR,[2,65]),o($VR,[2,75]),o($VR,[2,67]),o($VR,[2,76]),o($VT,$V0,{34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,31:225,38:$V2,39:$V3}),o($V7,[2,28]),o($V8,[2,30]),o($V9,[2,34]),o($V9,[2,35]),o($Va,[2,39]),o($Va,[2,40]),o($Va,[2,41]),o($Va,[2,42]),{17:$Va1,51:226,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},{17:$Va1,51:244,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},{17:$Vf,61:245,127:247,128:[1,246],129:248,138:$VE},o($Vd,[2,77]),o($Ve,[2,86],{79:67,80:68,81:69,82:70,83:71,114:72,84:73,86:74,130:75,129:76,127:77,131:78,132:79,133:80,134:81,135:82,100:83,101:84,87:85,89:86,136:87,142:92,147:94,148:95,88:112,108:118,109:119,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,111:128,112:137,75:249,17:$Vf,42:$Vg,77:$Vh,78:$Vi,90:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,110:$Vy,113:$Vz,120:$VA,124:$VB,126:$VC,137:$VD,138:$VE,140:$VF,143:$VG,144:$VH,150:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO}),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,84]),{17:$Vf,42:$Vg,81:164,82:70,83:71,84:73,86:74,87:85,88:112,89:86,90:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:83,101:84,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:118,109:119,110:$Vy,111:128,112:137,113:$Vz,114:72,120:$VA,124:$VB,126:$VC,127:77,129:76,130:75,131:78,132:79,133:80,134:81,135:82,136:87,137:$VD,138:$VE,140:$VF,142:92,143:$VG,144:$VH,147:94,148:95,150:$VI,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO},{17:$Vf,42:$Vg,81:165,82:70,83:71,84:73,86:74,87:85,88:112,89:86,90:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:83,101:84,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:118,109:119,110:$Vy,111:128,112:137,113:$Vz,114:72,120:$VA,124:$VB,126:$VC,127:77,129:76,130:75,131:78,132:79,133:80,134:81,135:82,136:87,137:$VD,138:$VE,140:$VF,142:92,143:$VG,144:$VH,147:94,148:95,150:$VI,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO},o($VP,[2,124]),o($VP,[2,126]),o($VP,[2,127]),o($VP,[2,128]),o([13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,102,103,104,105,106,107,113,120,122,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:251,16:$V1,38:$V2,39:$V3,99:[1,252],110:[1,250]}),o([13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,118:253,11:255,141:256,16:$V1,18:[1,254],38:$V2,39:$V3,124:$Vh1}),{17:$Vf,42:$V11,110:$V21,112:189,125:258,126:$V31,127:191},o($Vi1,[2,92],{116:259,120:$VX}),o($Vi1,[2,93],{116:259,120:$VX}),o($VP,[2,106]),o($VP,[2,117]),{17:$V41},{42:[1,260]},o($VP,[2,94]),o($VP,[2,171]),o($VP,[2,172]),{18:[1,261]},o($VP,[2,174]),o($Vj1,$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,145:262,11:264,10:[1,263],16:$V1,38:$V2,39:$V3}),o($VP,[2,196]),o($VP,[2,152]),o($VP,[2,153]),o($VP,[2,154]),o($VP,[2,155]),o($VP,[2,250]),{91:[1,265]},{91:[1,266]},{91:[1,267]},{91:[1,268]},{91:[1,269]},o($VP,[2,104]),o($V71,$Vk1,{91:$V81}),{91:[1,270]},{91:[1,271]},{91:[1,272]},{18:[1,274],42:[1,275],172:273},{91:[1,276]},{91:[1,277]},{91:[1,278]},{91:[1,279]},{91:[1,280]},{18:[1,281]},{13:[1,283],122:[2,194],149:282},o($VP,[2,191]),o($VP,[2,195]),o($V01,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:284,10:[1,285],16:$V1,38:$V2,39:$V3}),{18:[1,287],160:286,173:$VO},{18:[1,288]},{18:[1,290],110:[1,289]},{18:[1,291]},{18:[1,292]},{18:[1,293]},{18:[1,294]},{110:$V21,112:295},{42:[1,296]},{19:[1,297]},o($V7,[2,27]),o($Vb,[2,46]),{17:[1,298]},o([5,9,10,13,18,20,23,26,33,35,39,43,44,45,49,59,60,66,67,68,69,70,71,72,73,74,91,121,122,123],[2,199],{153:299,38:[1,302],42:[1,301],124:[1,300]}),o($Vl1,[2,203]),{17:[1,303]},o($Vl1,[2,205]),o($Vl1,[2,206]),o($Vl1,[2,207]),o($Vl1,[2,208]),o($Vl1,[2,229]),o($Vl1,[2,230]),{17:[1,304]},o($Vl1,[2,238]),o($Vl1,[2,239]),{17:$Va1,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,152:305,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},{17:[1,306]},{17:[1,307]},{17:[1,308]},o($Vc,[2,48]),{17:$VW,62:309},{17:[2,156]},{17:[2,157]},{17:[2,158]},o($Vd,[2,79]),{59:[1,310]},{59:[1,311],122:[1,312]},o([13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,113,120,122,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:313,16:$V1,38:$V2,39:$V3,110:[1,314]}),{13:[1,316],18:[2,134],119:315},o($VP,[2,131]),o($Vm1,[2,176]),o($Vm1,[2,177]),o($Vm1,[2,178]),o($VP,[2,151]),o($VP,[2,135]),o($VP,$Vk1),o($VP,[2,173]),{10:[2,186],13:[1,318],146:317},o($VP,[2,183]),{91:[1,319]},o($Vn1,[2,108]),o($Vn1,[2,109]),o($Vn1,[2,110]),o($Vn1,[2,111]),o($Vn1,[2,112]),o($Vn1,[2,96]),o($Vn1,[2,97]),o($Vn1,[2,98]),{18:[1,320]},o($V61,[2,226]),{18:[2,227]},o($Vn1,[2,99]),o($Vn1,[2,100]),o($Vn1,[2,101]),o($Vn1,[2,102]),o($Vn1,[2,103]),{7:322,8:323,9:$V51,54:[1,321]},{122:[1,324]},o([17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,122,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:325,16:$V1,38:$V2,39:$V3}),{10:[1,326]},o($VP,[2,5]),{18:[1,327]},o($V61,[2,219]),o($V61,[2,228]),{18:[1,328]},o($V61,[2,224]),o($V61,[2,221]),o($V61,[2,220]),o($V61,[2,222]),o($VP,$Vo1),o($VP,[2,121]),o($VP,[2,120]),o([17,20,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:329,16:$V1,38:$V2,39:$V3}),{18:[1,330]},o($Vl1,[2,198]),o($Vl1,[2,200]),o($Vl1,[2,201]),o($Vl1,[2,202]),{18:[1,331]},{42:[1,332]},{18:[1,333]},{18:[1,334]},{17:$Va1,18:[1,337],42:[1,335],51:336,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},{17:$Va1,42:[1,338],51:339,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},o($Vd,[2,54]),{121:[1,340],123:[1,341]},{121:[1,342],123:[1,343]},o($VP,[2,141]),{59:[1,345],122:[1,344]},{59:[1,346]},{18:[1,347]},o([17,18,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:255,141:256,118:348,16:$V1,38:$V2,39:$V3,124:$Vh1}),{10:[1,349]},o($Vj1,$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:264,145:350,16:$V1,38:$V2,39:$V3}),o([10,13,17,23,26,33,35,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,78,90,92,93,94,95,96,97,98,99,102,103,104,105,106,107,110,113,120,124,126,137,138,140,143,144,150,167,168,169,170,171,173],$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:351,16:$V1,38:$V2,39:$V3}),o($V61,[2,225]),{17:$Va1,51:352,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},o($VP,[2,181]),o($VP,[2,3]),o($VP,[2,190]),{122:[2,193]},o($VP,[2,4]),o($V61,[2,218]),o($V61,[2,223]),{20:[1,353]},o($Vl1,[2,197]),o($Vl1,[2,204]),{18:[1,354]},o($Vl1,[2,242]),o($Vl1,$Vo1),{18:[1,355]},{13:[1,357],18:[2,236],176:356},{54:[1,358]},{18:[1,359]},{18:[1,360]},o($Vp1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:361,16:$V1,38:$V2,39:$V3}),o($Vq1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:362,16:$V1,38:$V2,39:$V3}),o($Vp1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:363,16:$V1,38:$V2,39:$V3}),o($Vq1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:364,16:$V1,38:$V2,39:$V3}),o($VP,[2,142]),{121:[1,365],123:[1,366]},{121:[1,367],123:[1,368]},o($VP,[2,130]),{18:[2,133]},o($VP,[2,182]),{10:[2,185]},o([10,13],[2,187]),{7:369,8:323,9:$V51},o($VU,$V0,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:370,16:$V1,38:$V2,39:$V3}),o($Vl1,[2,237]),o($Vl1,[2,231]),{18:[1,371]},{17:$Va1,51:372,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},{17:$Va1,51:373,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},o($Vl1,[2,240]),o($Vl1,[2,241]),{121:[1,374]},{123:[1,375]},{121:[1,376]},{123:[1,377]},o($Vr1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:379,16:$V1,38:$V2,39:$V3,110:[1,378]}),o($Vs1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:380,16:$V1,38:$V2,39:$V3,110:[1,381]}),o($Vr1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:383,16:$V1,38:$V2,39:$V3,110:[1,382]}),o($Vs1,$V0,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:384,16:$V1,38:$V2,39:$V3,110:[1,385]}),o($VP,[2,180]),o($V5,[2,12]),{54:[1,386]},{18:[2,235]},o($Vl1,[2,233]),{122:[1,387]},{122:[1,388]},{122:[1,389]},{122:[1,390]},{121:[1,391]},{121:[1,392]},{123:[1,393]},{123:[1,394]},{121:[1,395]},{121:[1,396]},{123:[1,397]},{123:[1,398]},{17:$Va1,51:399,93:$VZ,108:229,113:$Vb1,143:$Vc1,144:$Vd1,150:$Ve1,151:$Vf1,152:228,154:$Vg1,155:231,156:232,157:233,158:234,159:120,160:121,161:122,162:123,163:124,164:125,165:126,166:127,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,173:$VO,174:235,175:236,177:238,178:239},o($VP,[2,137]),o($VP,[2,138]),o($VP,[2,139]),o($VP,[2,140]),{122:[1,400]},{122:[1,401]},{122:[1,402]},{122:[1,403]},{122:[1,404]},{122:[1,405]},{122:[1,406]},{122:[1,407]},o($Vl1,[2,232]),o($VP,[2,147]),o($VP,[2,149]),o($VP,[2,148]),o($VP,[2,150]),o($VP,[2,143]),o($VP,[2,145]),o($VP,[2,144]),o($VP,[2,146])],
defaultActions: {3:[2,2],25:[2,1],246:[2,156],247:[2,157],248:[2,158],275:[2,227],325:[2,193],348:[2,133],350:[2,185],372:[2,235]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    /*const { Nodo } = require("../dist/xpath/instrucciones/Nodo");   
    const { Expresion } = require("../dist/xpath/instrucciones/Expresion"); 
    const { Predicado } = require("../dist/xpath/instrucciones/Predicado");    
    const { Wildcard } = require("../dist/xpath/instrucciones/Wildcard");    
    const { Axes } = require("../dist/xpath/instrucciones/Axes");    
    const { AxesPredicado } = require("../dist/xpath/instrucciones/AxesPredicado");    
    const { AST_XPATH } = require("../dist/xpath/ast/AST_XPATH");  
    const { Error } = require("../dist/xpath/reportes/Error");  */

    var list_error = [];
     //REPORTE DE ERRORES
    function addError(tipo, descripcion, line, column) {
        let gramatica = new Error(tipo,descripcion,line,column);
        //list_error.push(error);
    }
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 13;
break;
case 1:return 't_for';
break;
case 2:return 't_let';
break;
case 3:return 't_some';
break;
case 4:return 't_every';
break;
case 5:return 16;
break;
case 6:return 23;
break;
case 7:return 26;
break;
case 8:return 68;
break;
case 9:return 69;
break;
case 10:return 70;
break;
case 11:return 71;
break;
case 12:return 72;
break;
case 13:return 73;
break;
case 14:return 59;
break;
case 15:return 66;
break;
case 16:return 67;
break;
case 17:return 60;
break;
case 18:return 74;
break;
case 19:return 33;
break;
case 20:return 35;
break;
case 21:return 38;
break;
case 22:return 39;
break;
case 23:return 42;
break;
case 24:return 43;
break;
case 25:return 44;
break;
case 26:return 45;
break;
case 27:return 't_union';
break;
case 28:return 't_except';
break;
case 29:return 49;
break;
case 30:return 50;
break;
case 31:return 53;
break;
case 32:return 54;
break;
case 33:return 't_castable';
break;
case 34:return 't_cast';
break;
case 35:return 78;
break;
case 36:return 77;
break;
case 37:return 91;
break;
case 38:return 107;
break;
case 39:return 140;
break;
case 40:return 99;
break;
case 41:return 120;
break;
case 42:return 122;
break;
case 43:return 17;
break;
case 44:return 18;
break;
case 45:return 9;
break;
case 46:return 10;
break;
case 47:return 123;
break;
case 48:return 121;
break;
case 49:return 138;
break;
case 50:return 't_modulo';
break;
case 51:return 't_numeral';
break;
case 52:return 't_return';
break;
case 53:return 't_in';
break;
case 54:return 't_satisfies';
break;
case 55:return 19;
break;
case 56:return 20;
break;
case 57:return 90;
break;
case 58:return 92;
break;
case 59:return 93;
break;
case 60:return 94;
break;
case 61:return 95;
break;
case 62:return 96;
break;
case 63:return 97;
break;
case 64:return 98;
break;
case 65:return 102;
break;
case 66:return 103;
break;
case 67:return 104;
break;
case 68:return 't_preceding-sibling';
break;
case 69:return 105;
break;
case 70:return 106;
break;
case 71:return 143;
break;
case 72:return 144;
break;
case 73:return 150;
break;
case 74:return 151;
break;
case 75:return 154;
break;
case 76:return 113;
break;
case 77:return 168;
break;
case 78:return 167;
break;
case 79:return 169;
break;
case 80:return 170;
break;
case 81:return 171;
break;
case 82:return 't_schema-attribute';
break;
case 83:return 173;
break;
case 84:return 't_schema-element';
break;
case 85:return 124;
break;
case 86:return 't_Q';
break;
case 87:return 't_doble_comillas';
break;
case 88:return 't_doble_comilla';
break;
case 89:return 't_not';
break;
case 90:return 137;
break;
case 91:return 126;
break;
case 92:return 110;
break;
case 93:return 5;
break;
case 94:  addError(`Error léxico`,`No se esperaba ${yy_.yytext}`,yy_.yylloc.first_line, yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+,)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:some\b)/,/^(?:every\b)/,/^(?:if\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:is\b)/,/^(?:\|)/,/^(?:to\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:idiv\b)/,/^(?:mod\b)/,/^(?:union\b)/,/^(?:except\b)/,/^(?:instance\b)/,/^(?:of\b)/,/^(?:treat\b)/,/^(?:as\b)/,/^(?:castable\b)/,/^(?:cast\b)/,/^(?:\/\/)/,/^(?:\/)/,/^(?::)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:")/,/^(?:')/,/^(?:\$)/,/^(?:%)/,/^(?:#)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:satisfies\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:attribute\b)/,/^(?:self\b)/,/^(?:descendant-or-self\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:ancestor\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:ancestor-or-self\b)/,/^(?:function\b)/,/^(?:map\b)/,/^(?:array\b)/,/^(?:empty-sequence\b)/,/^(?:item\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:document-node\b)/,/^(?:comment\b)/,/^(?:namespace-node\b)/,/^(?:processing-instruction\b)/,/^(?:schema-attribute\b)/,/^(?:element\b)/,/^(?:schema-element\b)/,/^(?:\?)/,/^(?:Q\b)/,/^(?:x\b)/,/^(?:y\b)/,/^(?:not\b)/,/^(?:(([0-9]+\.[0-9]+)|(\.\[0-9\]\+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_xpath;
exports.Parser = Grammar_xpath.Parser;
exports.parse = function () { return Grammar_xpath.parse.apply(Grammar_xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}