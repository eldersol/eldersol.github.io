{"version":3,"sources":["App.tsx","Components/Contador.tsx","reportWebVitals.ts","index.tsx","Gramatica/Gramatica.js"],"names":["entrada","Contador","useState","contador","setContador","onClick","Gramatica","parse","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","o","k","v","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","parser","trace","yy","symbols_","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","error","this","first_line","first_column","$","Number","table","defaultActions","parseError","str","hash","recoverable","Error","input","self","stack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","popStack","n","getPrototypeOf","symbol","preErrorSymbol","state","action","r","p","len","newState","expected","lex","token","yyval","error_rule_depth","locateNearestErrorRecoveryRule","stack_probe","depth","toString","errStr","showPosition","join","text","match","line","loc","Array","last_line","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","exports","main","process","exit","source","require","readFileSync","normalize","module","argv"],"mappings":"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","file":"static/js/main.00aeadee.chunk.js","sourcesContent":["import Contador from './Components/Contador';\r\n\r\nimport Gramatica from './Gramatica/Gramatica'\r\n\r\nfunction ejecutarCodigo(entrada:String) {\r\n  const instrucciones = Gramatica.parse(entrada);\r\n  console.log(entrada);\r\n\r\n}\r\n\r\nejecutarCodigo(\"1+1\")\r\n\r\nfunction App() {\r\n  return (\r\n    <div >\r\n      <h1>hola mundo!!!</h1>\r\n      <h1>hola mundo!!!</h1>\r\n      <Contador/>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Fragment , useState} from 'react'\r\n\r\nexport interface ContadorProps {\r\n \r\n    \r\n}\r\n \r\nconst Contador: React.SFC<ContadorProps> = () => {\r\n\r\n    const [contador, setContador] = useState(1)\r\n\r\n    const agregar = () => {\r\n        setContador(contador+1);\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <button onClick={agregar}>Agregar</button>\r\n            <h2>hola contador</h2>\r\n            <h2>{contador}</h2>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Contador;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/* parser generated by jison 0.4.18 */\r\n/*\r\n  Returns a Parser object of the following structure:\r\n\r\n  Parser: {\r\n    yy: {}\r\n  }\r\n\r\n  Parser.prototype: {\r\n    yy: {},\r\n    trace: function(),\r\n    symbols_: {associative list: name ==> number},\r\n    terminals_: {associative list: number ==> name},\r\n    productions_: [...],\r\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\r\n    table: [...],\r\n    defaultActions: {...},\r\n    parseError: function(str, hash),\r\n    parse: function(input),\r\n\r\n    lexer: {\r\n        EOF: 1,\r\n        parseError: function(str, hash),\r\n        setInput: function(input),\r\n        input: function(),\r\n        unput: function(str),\r\n        more: function(),\r\n        less: function(n),\r\n        pastInput: function(),\r\n        upcomingInput: function(),\r\n        showPosition: function(),\r\n        test_match: function(regex_match_array, rule_index),\r\n        next: function(),\r\n        lex: function(),\r\n        begin: function(condition),\r\n        popState: function(),\r\n        _currentRules: function(),\r\n        topState: function(),\r\n        pushState: function(condition),\r\n\r\n        options: {\r\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\r\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\r\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\r\n        },\r\n\r\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\r\n        rules: [...],\r\n        conditions: {associative list: name ==> set},\r\n    }\r\n  }\r\n\r\n\r\n  token location info (@$, _$, etc.): {\r\n    first_line: n,\r\n    last_line: n,\r\n    first_column: n,\r\n    last_column: n,\r\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\r\n  }\r\n\r\n\r\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\r\n    text:        (matched text)\r\n    token:       (the produced terminal token, if any)\r\n    line:        (yylineno)\r\n  }\r\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\r\n    loc:         (yylloc)\r\n    expected:    (string describing the set of expected tokens)\r\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\r\n  }\r\n*/\r\nvar Gramatica = (function(){\r\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,16],$V7=[1,15],$V8=[1,17],$V9=[1,18],$Va=[10,12,13,14,15,19],$Vb=[10,12,13,19];\r\nvar parser = {trace: function trace () { },\r\nyy: {},\r\nsymbols_: {\"error\":2,\"ini\":3,\"instrucciones\":4,\"EOF\":5,\"instruccion\":6,\"REVALUAR\":7,\"CORIZQ\":8,\"expresion\":9,\"CORDER\":10,\"PTCOMA\":11,\"MENOS\":12,\"MAS\":13,\"POR\":14,\"DIVIDIDO\":15,\"ENTERO\":16,\"DECIMAL\":17,\"PARIZQ\":18,\"PARDER\":19,\"$accept\":0,\"$end\":1},\r\nterminals_: {2:\"error\",5:\"EOF\",7:\"REVALUAR\",8:\"CORIZQ\",10:\"CORDER\",11:\"PTCOMA\",12:\"MENOS\",13:\"MAS\",14:\"POR\",15:\"DIVIDIDO\",16:\"ENTERO\",17:\"DECIMAL\",18:\"PARIZQ\",19:\"PARDER\"},\r\nproductions_: [0,[3,2],[4,2],[4,1],[4,1],[6,5],[9,2],[9,3],[9,3],[9,3],[9,3],[9,1],[9,1],[9,3]],\r\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\r\n/* this == yyval */\r\n\r\nvar $0 = $$.length - 1;\r\nswitch (yystate) {\r\ncase 4:\r\n console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); \r\nbreak;\r\ncase 5:\r\n\r\n\t\tconsole.log('El valor de la expresión es: ' + $$[$0-2]);\r\n\t\r\nbreak;\r\ncase 6:\r\n this.$ = $$[$0] *-1; \r\nbreak;\r\ncase 7:\r\n this.$ = $$[$0-2] + $$[$0]; \r\nbreak;\r\ncase 8:\r\n this.$ = $$[$0-2] - $$[$0]; \r\nbreak;\r\ncase 9:\r\n this.$ = $$[$0-2] * $$[$0]; \r\nbreak;\r\ncase 10:\r\n this.$ = $$[$0-2] / $$[$0]; \r\nbreak;\r\ncase 11: case 12:\r\n this.$ = Number($$[$0]); \r\nbreak;\r\ncase 13:\r\n this.$ = $$[$0-1]; \r\nbreak;\r\n}\r\n},\r\ntable: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{5:[1,6]},{2:$V0,4:7,5:[2,3],6:3,7:$V1},{5:[2,4]},{8:[1,8]},{1:[2,1]},{5:[2,2]},{9:9,12:$V2,16:$V3,17:$V4,18:$V5},{10:[1,14],12:$V6,13:$V7,14:$V8,15:$V9},{9:19,12:$V2,16:$V3,17:$V4,18:$V5},o($Va,[2,11]),o($Va,[2,12]),{9:20,12:$V2,16:$V3,17:$V4,18:$V5},{11:[1,21]},{9:22,12:$V2,16:$V3,17:$V4,18:$V5},{9:23,12:$V2,16:$V3,17:$V4,18:$V5},{9:24,12:$V2,16:$V3,17:$V4,18:$V5},{9:25,12:$V2,16:$V3,17:$V4,18:$V5},o($Va,[2,6]),{12:$V6,13:$V7,14:$V8,15:$V9,19:[1,26]},o([2,5,7],[2,5]),o($Vb,[2,7],{14:$V8,15:$V9}),o($Vb,[2,8],{14:$V8,15:$V9}),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,13])],\r\ndefaultActions: {4:[2,4],6:[2,1],7:[2,2]},\r\nparseError: function parseError (str, hash) {\r\n    if (hash.recoverable) {\r\n        this.trace(str);\r\n    } else {\r\n        var error = new Error(str);\r\n        error.hash = hash;\r\n        throw error;\r\n    }\r\n},\r\nparse: function parse (input) {\r\n    var self = this,\r\n        stack = [0],\r\n        tstack = [], // token stack\r\n        vstack = [null], // semantic value stack\r\n        lstack = [], // location stack\r\n        table = this.table,\r\n        yytext = '',\r\n        yylineno = 0,\r\n        yyleng = 0,\r\n        recovering = 0,\r\n        TERROR = 2,\r\n        EOF = 1;\r\n\r\n    var args = lstack.slice.call(arguments, 1);\r\n\r\n    //this.reductionCount = this.shiftCount = 0;\r\n\r\n    var lexer = Object.create(this.lexer);\r\n    var sharedState = { yy: {} };\r\n    // copy state\r\n    for (var k in this.yy) {\r\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\r\n        sharedState.yy[k] = this.yy[k];\r\n      }\r\n    }\r\n\r\n    lexer.setInput(input, sharedState.yy);\r\n    sharedState.yy.lexer = lexer;\r\n    sharedState.yy.parser = this;\r\n    if (typeof lexer.yylloc == 'undefined') {\r\n        lexer.yylloc = {};\r\n    }\r\n    var yyloc = lexer.yylloc;\r\n    lstack.push(yyloc);\r\n\r\n    var ranges = lexer.options && lexer.options.ranges;\r\n\r\n    if (typeof sharedState.yy.parseError === 'function') {\r\n        this.parseError = sharedState.yy.parseError;\r\n    } else {\r\n        this.parseError = Object.getPrototypeOf(this).parseError;\r\n    }\r\n\r\n    function popStack (n) {\r\n        stack.length = stack.length - 2 * n;\r\n        vstack.length = vstack.length - n;\r\n        lstack.length = lstack.length - n;\r\n    }\r\n\r\n_token_stack:\r\n    var lex = function () {\r\n        var token;\r\n        token = lexer.lex() || EOF;\r\n        // if token isn't its numeric value, convert\r\n        if (typeof token !== 'number') {\r\n            token = self.symbols_[token] || token;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\r\n    while (true) {\r\n        // retreive state number from top of stack\r\n        state = stack[stack.length - 1];\r\n\r\n        // use default actions if available\r\n        if (this.defaultActions[state]) {\r\n            action = this.defaultActions[state];\r\n        } else {\r\n            if (symbol === null || typeof symbol == 'undefined') {\r\n                symbol = lex();\r\n            }\r\n            // read action for current state and first input\r\n            action = table[state] && table[state][symbol];\r\n        }\r\n\r\n_handle_error:\r\n        // handle parse error\r\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\r\n            var error_rule_depth;\r\n            var errStr = '';\r\n\r\n            // Return the rule stack depth where the nearest error rule can be found.\r\n            // Return FALSE when no error recovery rule was found.\r\n            function locateNearestErrorRecoveryRule(state) {\r\n                var stack_probe = stack.length - 1;\r\n                var depth = 0;\r\n\r\n                // try to recover from error\r\n                for(;;) {\r\n                    // check for error recovery rule in this state\r\n                    if ((TERROR.toString()) in table[state]) {\r\n                        return depth;\r\n                    }\r\n                    if (state === 0 || stack_probe < 2) {\r\n                        return false; // No suitable error recovery rule available.\r\n                    }\r\n                    stack_probe -= 2; // popStack(1): [symbol, action]\r\n                    state = stack[stack_probe];\r\n                    ++depth;\r\n                }\r\n            }\r\n\r\n            if (!recovering) {\r\n                // first see if there's any chance at hitting an error recovery rule:\r\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\r\n\r\n                // Report error\r\n                expected = [];\r\n                for (p in table[state]) {\r\n                    if (this.terminals_[p] && p > TERROR) {\r\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\r\n                    }\r\n                }\r\n                if (lexer.showPosition) {\r\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\r\n                } else {\r\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\r\n                                  (symbol == EOF ? \"end of input\" :\r\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\r\n                }\r\n                this.parseError(errStr, {\r\n                    text: lexer.match,\r\n                    token: this.terminals_[symbol] || symbol,\r\n                    line: lexer.yylineno,\r\n                    loc: yyloc,\r\n                    expected: expected,\r\n                    recoverable: (error_rule_depth !== false)\r\n                });\r\n            } else if (preErrorSymbol !== EOF) {\r\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\r\n            }\r\n\r\n            // just recovered from another error\r\n            if (recovering == 3) {\r\n                if (symbol === EOF || preErrorSymbol === EOF) {\r\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\r\n                }\r\n\r\n                // discard current lookahead and grab another\r\n                yyleng = lexer.yyleng;\r\n                yytext = lexer.yytext;\r\n                yylineno = lexer.yylineno;\r\n                yyloc = lexer.yylloc;\r\n                symbol = lex();\r\n            }\r\n\r\n            // try to recover from error\r\n            if (error_rule_depth === false) {\r\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\r\n            }\r\n            popStack(error_rule_depth);\r\n\r\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\r\n            symbol = TERROR;         // insert generic error symbol as new lookahead\r\n            state = stack[stack.length-1];\r\n            action = table[state] && table[state][TERROR];\r\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\r\n        }\r\n\r\n        // this shouldn't happen, unless resolve defaults are off\r\n        if (action[0] instanceof Array && action.length > 1) {\r\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\r\n        }\r\n\r\n        switch (action[0]) {\r\n            case 1: // shift\r\n                //this.shiftCount++;\r\n\r\n                stack.push(symbol);\r\n                vstack.push(lexer.yytext);\r\n                lstack.push(lexer.yylloc);\r\n                stack.push(action[1]); // push state\r\n                symbol = null;\r\n                if (!preErrorSymbol) { // normal execution/no error\r\n                    yyleng = lexer.yyleng;\r\n                    yytext = lexer.yytext;\r\n                    yylineno = lexer.yylineno;\r\n                    yyloc = lexer.yylloc;\r\n                    if (recovering > 0) {\r\n                        recovering--;\r\n                    }\r\n                } else {\r\n                    // error just occurred, resume old lookahead f/ before error\r\n                    symbol = preErrorSymbol;\r\n                    preErrorSymbol = null;\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                // reduce\r\n                //this.reductionCount++;\r\n\r\n                len = this.productions_[action[1]][1];\r\n\r\n                // perform semantic action\r\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\r\n                // default location, uses first token for firsts, last for lasts\r\n                yyval._$ = {\r\n                    first_line: lstack[lstack.length-(len||1)].first_line,\r\n                    last_line: lstack[lstack.length-1].last_line,\r\n                    first_column: lstack[lstack.length-(len||1)].first_column,\r\n                    last_column: lstack[lstack.length-1].last_column\r\n                };\r\n                if (ranges) {\r\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\r\n                }\r\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\r\n\r\n                if (typeof r !== 'undefined') {\r\n                    return r;\r\n                }\r\n\r\n                // pop off stack\r\n                if (len) {\r\n                    stack = stack.slice(0,-1*len*2);\r\n                    vstack = vstack.slice(0, -1*len);\r\n                    lstack = lstack.slice(0, -1*len);\r\n                }\r\n\r\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\r\n                vstack.push(yyval.$);\r\n                lstack.push(yyval._$);\r\n                // goto new state = table[STATE][NONTERMINAL]\r\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\r\n                stack.push(newState);\r\n                break;\r\n\r\n            case 3:\r\n                // accept\r\n                return true;\r\n        }\r\n\r\n    }\r\n\r\n    return true;\r\n}};\r\n/* generated by jison-lex 0.3.4 */\r\nvar lexer = (function(){\r\nvar lexer = ({\r\n\r\nEOF:1,\r\n\r\nparseError:function parseError(str, hash) {\r\n        if (this.yy.parser) {\r\n            this.yy.parser.parseError(str, hash);\r\n        } else {\r\n            throw new Error(str);\r\n        }\r\n    },\r\n\r\n// resets the lexer, sets new input\r\nsetInput:function (input, yy) {\r\n        this.yy = yy || this.yy || {};\r\n        this._input = input;\r\n        this._more = this._backtrack = this.done = false;\r\n        this.yylineno = this.yyleng = 0;\r\n        this.yytext = this.matched = this.match = '';\r\n        this.conditionStack = ['INITIAL'];\r\n        this.yylloc = {\r\n            first_line: 1,\r\n            first_column: 0,\r\n            last_line: 1,\r\n            last_column: 0\r\n        };\r\n        if (this.options.ranges) {\r\n            this.yylloc.range = [0,0];\r\n        }\r\n        this.offset = 0;\r\n        return this;\r\n    },\r\n\r\n// consumes and returns one char from the input\r\ninput:function () {\r\n        var ch = this._input[0];\r\n        this.yytext += ch;\r\n        this.yyleng++;\r\n        this.offset++;\r\n        this.match += ch;\r\n        this.matched += ch;\r\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\r\n        if (lines) {\r\n            this.yylineno++;\r\n            this.yylloc.last_line++;\r\n        } else {\r\n            this.yylloc.last_column++;\r\n        }\r\n        if (this.options.ranges) {\r\n            this.yylloc.range[1]++;\r\n        }\r\n\r\n        this._input = this._input.slice(1);\r\n        return ch;\r\n    },\r\n\r\n// unshifts one char (or a string) into the input\r\nunput:function (ch) {\r\n        var len = ch.length;\r\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\r\n\r\n        this._input = ch + this._input;\r\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\r\n        //this.yyleng -= len;\r\n        this.offset -= len;\r\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\r\n        this.match = this.match.substr(0, this.match.length - 1);\r\n        this.matched = this.matched.substr(0, this.matched.length - 1);\r\n\r\n        if (lines.length - 1) {\r\n            this.yylineno -= lines.length - 1;\r\n        }\r\n        var r = this.yylloc.range;\r\n\r\n        this.yylloc = {\r\n            first_line: this.yylloc.first_line,\r\n            last_line: this.yylineno + 1,\r\n            first_column: this.yylloc.first_column,\r\n            last_column: lines ?\r\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\r\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\r\n              this.yylloc.first_column - len\r\n        };\r\n\r\n        if (this.options.ranges) {\r\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\r\n        }\r\n        this.yyleng = this.yytext.length;\r\n        return this;\r\n    },\r\n\r\n// When called from action, caches matched text and appends it on next action\r\nmore:function () {\r\n        this._more = true;\r\n        return this;\r\n    },\r\n\r\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\r\nreject:function () {\r\n        if (this.options.backtrack_lexer) {\r\n            this._backtrack = true;\r\n        } else {\r\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\r\n                text: \"\",\r\n                token: null,\r\n                line: this.yylineno\r\n            });\r\n\r\n        }\r\n        return this;\r\n    },\r\n\r\n// retain first n characters of the match\r\nless:function (n) {\r\n        this.unput(this.match.slice(n));\r\n    },\r\n\r\n// displays already matched input, i.e. for error messages\r\npastInput:function () {\r\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\r\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\r\n    },\r\n\r\n// displays upcoming input, i.e. for error messages\r\nupcomingInput:function () {\r\n        var next = this.match;\r\n        if (next.length < 20) {\r\n            next += this._input.substr(0, 20-next.length);\r\n        }\r\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\r\n    },\r\n\r\n// displays the character position where the lexing error occurred, i.e. for error messages\r\nshowPosition:function () {\r\n        var pre = this.pastInput();\r\n        var c = new Array(pre.length + 1).join(\"-\");\r\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\r\n    },\r\n\r\n// test the lexed token: return FALSE when not a match, otherwise return token\r\ntest_match:function(match, indexed_rule) {\r\n        var token,\r\n            lines,\r\n            backup;\r\n\r\n        if (this.options.backtrack_lexer) {\r\n            // save context\r\n            backup = {\r\n                yylineno: this.yylineno,\r\n                yylloc: {\r\n                    first_line: this.yylloc.first_line,\r\n                    last_line: this.last_line,\r\n                    first_column: this.yylloc.first_column,\r\n                    last_column: this.yylloc.last_column\r\n                },\r\n                yytext: this.yytext,\r\n                match: this.match,\r\n                matches: this.matches,\r\n                matched: this.matched,\r\n                yyleng: this.yyleng,\r\n                offset: this.offset,\r\n                _more: this._more,\r\n                _input: this._input,\r\n                yy: this.yy,\r\n                conditionStack: this.conditionStack.slice(0),\r\n                done: this.done\r\n            };\r\n            if (this.options.ranges) {\r\n                backup.yylloc.range = this.yylloc.range.slice(0);\r\n            }\r\n        }\r\n\r\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\r\n        if (lines) {\r\n            this.yylineno += lines.length;\r\n        }\r\n        this.yylloc = {\r\n            first_line: this.yylloc.last_line,\r\n            last_line: this.yylineno + 1,\r\n            first_column: this.yylloc.last_column,\r\n            last_column: lines ?\r\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\r\n                         this.yylloc.last_column + match[0].length\r\n        };\r\n        this.yytext += match[0];\r\n        this.match += match[0];\r\n        this.matches = match;\r\n        this.yyleng = this.yytext.length;\r\n        if (this.options.ranges) {\r\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\r\n        }\r\n        this._more = false;\r\n        this._backtrack = false;\r\n        this._input = this._input.slice(match[0].length);\r\n        this.matched += match[0];\r\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\r\n        if (this.done && this._input) {\r\n            this.done = false;\r\n        }\r\n        if (token) {\r\n            return token;\r\n        } else if (this._backtrack) {\r\n            // recover context\r\n            for (var k in backup) {\r\n                this[k] = backup[k];\r\n            }\r\n            return false; // rule action called reject() implying the next rule should be tested instead.\r\n        }\r\n        return false;\r\n    },\r\n\r\n// return next match in input\r\nnext:function () {\r\n        if (this.done) {\r\n            return this.EOF;\r\n        }\r\n        if (!this._input) {\r\n            this.done = true;\r\n        }\r\n\r\n        var token,\r\n            match,\r\n            tempMatch,\r\n            index;\r\n        if (!this._more) {\r\n            this.yytext = '';\r\n            this.match = '';\r\n        }\r\n        var rules = this._currentRules();\r\n        for (var i = 0; i < rules.length; i++) {\r\n            tempMatch = this._input.match(this.rules[rules[i]]);\r\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\r\n                match = tempMatch;\r\n                index = i;\r\n                if (this.options.backtrack_lexer) {\r\n                    token = this.test_match(tempMatch, rules[i]);\r\n                    if (token !== false) {\r\n                        return token;\r\n                    } else if (this._backtrack) {\r\n                        match = false;\r\n                        continue; // rule action called reject() implying a rule MISmatch.\r\n                    } else {\r\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\r\n                        return false;\r\n                    }\r\n                } else if (!this.options.flex) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (match) {\r\n            token = this.test_match(match, rules[index]);\r\n            if (token !== false) {\r\n                return token;\r\n            }\r\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\r\n            return false;\r\n        }\r\n        if (this._input === \"\") {\r\n            return this.EOF;\r\n        } else {\r\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\r\n                text: \"\",\r\n                token: null,\r\n                line: this.yylineno\r\n            });\r\n        }\r\n    },\r\n\r\n// return next match that has a token\r\nlex:function lex () {\r\n        var r = this.next();\r\n        if (r) {\r\n            return r;\r\n        } else {\r\n            return this.lex();\r\n        }\r\n    },\r\n\r\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\r\nbegin:function begin (condition) {\r\n        this.conditionStack.push(condition);\r\n    },\r\n\r\n// pop the previously active lexer condition state off the condition stack\r\npopState:function popState () {\r\n        var n = this.conditionStack.length - 1;\r\n        if (n > 0) {\r\n            return this.conditionStack.pop();\r\n        } else {\r\n            return this.conditionStack[0];\r\n        }\r\n    },\r\n\r\n// produce the lexer rule set which is active for the currently active lexer condition state\r\n_currentRules:function _currentRules () {\r\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\r\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\r\n        } else {\r\n            return this.conditions[\"INITIAL\"].rules;\r\n        }\r\n    },\r\n\r\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\r\ntopState:function topState (n) {\r\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\r\n        if (n >= 0) {\r\n            return this.conditionStack[n];\r\n        } else {\r\n            return \"INITIAL\";\r\n        }\r\n    },\r\n\r\n// alias for begin(condition)\r\npushState:function pushState (condition) {\r\n        this.begin(condition);\r\n    },\r\n\r\n// return the number of states currently on the stack\r\nstateStackSize:function stateStackSize() {\r\n        return this.conditionStack.length;\r\n    },\r\noptions: {\"case-insensitive\":true},\r\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\r\nvar YYSTATE=YY_START;\r\nswitch($avoiding_name_collisions) {\r\ncase 0:return 7;\r\nbreak;\r\ncase 1:return 11;\r\nbreak;\r\ncase 2:return 18;\r\nbreak;\r\ncase 3:return 19;\r\nbreak;\r\ncase 4:return 8;\r\nbreak;\r\ncase 5:return 10;\r\nbreak;\r\ncase 6:return 13;\r\nbreak;\r\ncase 7:return 12;\r\nbreak;\r\ncase 8:return 14;\r\nbreak;\r\ncase 9:return 15;\r\nbreak;\r\ncase 10:\r\nbreak;\r\ncase 11:\r\nbreak;\r\ncase 12:return 17;\r\nbreak;\r\ncase 13:return 16;\r\nbreak;\r\ncase 14:return 5;\r\nbreak;\r\ncase 15: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); \r\nbreak;\r\n}\r\n},\r\nrules: [/^(?:Evaluar\\b)/i,/^(?:;)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:\\[)/i,/^(?:\\])/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:[ \\r\\t]+)/i,/^(?:\\n)/i,/^(?:[0-9]+(\\.[0-9]+)?\\b)/i,/^(?:[0-9]+\\b)/i,/^(?:$)/i,/^(?:.)/i],\r\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\"inclusive\":true}}\r\n});\r\nreturn lexer;\r\n})();\r\nparser.lexer = lexer;\r\nfunction Parser () {\r\n  this.yy = {};\r\n}\r\nParser.prototype = parser;parser.Parser = Parser;\r\nreturn new Parser;\r\n})();\r\n\r\n\r\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\r\nexports.parser = Gramatica;\r\nexports.Parser = Gramatica.Parser;\r\nexports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };\r\nexports.main = function commonjsMain (args) {\r\n    if (!args[1]) {\r\n        console.log('Usage: '+args[0]+' FILE');\r\n        process.exit(1);\r\n    }\r\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\r\n    return exports.parser.parse(source);\r\n};\r\nif (typeof module !== 'undefined' && require.main === module) {\r\n  exports.main(process.argv.slice(1));\r\n}\r\n}"],"sourceRoot":""}