/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9],$V1=[1,5],$V2=[5,10,17,18,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V3=[1,10],$V4=[1,26],$V5=[1,27],$V6=[2,60],$V7=[5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V8=[5,10,13,16,17,18,20,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V9=[5,10,13,16,18,20,23,26,33,34,36,39,40,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,114,123,124,125],$Va=[1,92],$Vb=[1,138],$Vc=[1,67],$Vd=[1,68],$Ve=[1,106],$Vf=[1,107],$Vg=[1,108],$Vh=[1,109],$Vi=[1,110],$Vj=[1,111],$Vk=[1,112],$Vl=[1,113],$Vm=[1,105],$Vn=[1,99],$Vo=[1,100],$Vp=[1,101],$Vq=[1,102],$Vr=[1,103],$Vs=[1,104],$Vt=[1,90],$Vu=[1,137],$Vv=[1,118],$Vw=[1,98],$Vx=[1,115],$Vy=[1,116],$Vz=[1,91],$VA=[1,93],$VB=[1,117],$VC=[1,95],$VD=[1,119],$VE=[1,131],$VF=[1,135],$VG=[1,134],$VH=[1,136],$VI=[1,133],$VJ=[1,132],$VK=[1,175],$VL=[1,174],$VM=[2,136],$VN=[1,181],$VO=[1,182],$VP=[1,180],$VQ=[16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$VR=[1,193],$VS=[1,194],$VT=[1,191],$VU=[1,205],$VV=[1,215],$VW=[5,9,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$VX=[5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$VY=[1,223],$VZ=[1,240],$V_=[1,241],$V$=[1,242],$V01=[1,237],$V11=[1,243],$V21=[1,227],$V31=[1,230],$V41=[1,257],$V51=[5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V61=[17,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V71=[43,94,100,111,115,168,169,170,171,172,174],$V81=[2,122],$V91=[13,18],$Va1=[2,217],$Vb1=[16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,123,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$Vc1=[16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$Vd1=[16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,115,122,123,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$Ve1=[16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,115,122,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XPath":4,"EOF":5,"Expr":6,"FunctionBody":7,"EnclosedExpr":8,"t_llave_izquierda":9,"t_llave_derecha":10,"Expr_recursivo":11,"ExprSingle":12,"t_coma":13,"IfExpr":14,"OrExpr":15,"t_if":16,"t_parentesis_izquierdo":17,"t_parentesis_derecho":18,"t_then":19,"t_else":20,"AndExpr":21,"OrExpr_recursivo":22,"t_or":23,"ComparisonExpr":24,"AndExpr_recursivo":25,"t_and":26,"StringConcatExpr":27,"ValueComp":28,"GeneralComp":29,"NodeComp":30,"RangeExpr":31,"StringConcatExpr_recursivo":32,"t_doble_barra":33,"t_barra":34,"AdditiveExpr":35,"t_to":36,"MultiplicativeExpr":37,"AdditiveExpr_recursivo":38,"t_suma":39,"t_resta":40,"UnionExpr":41,"MultiplicativeExpr_recursivo":42,"t_multiplicacion":43,"t_div":44,"t_idiv":45,"t_mod":46,"IntersectExceptExpr":47,"InstanceofExpr":48,"TreatExpr":49,"t_instance":50,"t_of":51,"SequenceType":52,"CastableExpr":53,"t_treat":54,"t_as":55,"CastExpr":56,"ArrowExpr":57,"UnaryExpr":58,"ArrowExpr_recursivo":59,"t_igual":60,"t_mayor_que":61,"ArrowFunctionSpecifier":62,"ArgumentList":63,"UnaryExpr_recursivo":64,"ValueExpr":65,"SimpleMapExpr":66,"t_diferente":67,"t_menor_que":68,"t_eq":69,"t_ne":70,"t_lt":71,"t_le":72,"t_gt":73,"t_ge":74,"t_is":75,"PathExpr":76,"SimpleMapExpr_recursivo":77,"t_diagonal":78,"t_doble_diagonal":79,"RelativePathExpr_recursivo":80,"RelativePathExpr":81,"StepExpr":82,"PostfixExpr":83,"AxisStep":84,"ReverseStep":85,"PredicateList":86,"ForwardStep":87,"ForwardAxis":88,"NodeTest":89,"AbbrevForwardStep":90,"t_child":91,"t_doble_dos_puntos":92,"t_descendant":93,"t_attribute":94,"t_self":95,"t_descendant-or-self":96,"t_following-sibling":97,"t_following":98,"t_namespace":99,"t_arroba":100,"ReverseAxis":101,"AbbrevReverseStep":102,"t_parent":103,"t_ancestor":104,"t_preceding_sibling":105,"t_preceding":106,"t_ancestor_or_self":107,"t_doble_punto":108,"KindTest":109,"NameTest":110,"StringLiteral":111,"Wildcard":112,"NCName":113,"t_dos_puntos":114,"t_node":115,"PrimaryExpr":116,"PostfixExpr_recursivo":117,"Predicate":118,"Lookup":119,"Argument":120,"ArgumentList_recursivo":121,"t_corchete_izquierdo":122,"t_comilla":123,"t_corchete_derecho":124,"t_comillas":125,"t_interrogacion":126,"KeySpecifier":127,"IntegerLiteral":128,"ParenthesizedExpr":129,"VarRef":130,"Literal":131,"ContextItemExpr":132,"FunctionItemExpr":133,"MapConstructor":134,"ArrayConstructor":135,"UnaryLookup":136,"NumericLiteral":137,"DecimalLiteral":138,"t_dolar":139,"VarName":140,"t_punto":141,"ArgumentPlaceholder":142,"InlineFunctionExpr":143,"t_function":144,"t_map":145,"MapConstructorEntry":146,"MapConstructor_recursivo":147,"SquareArrayConstructor":148,"CurlyArrayConstructor":149,"SquareArrayConstructor_recursivo":150,"t_array":151,"t_empty-sequence":152,"ItemType":153,"OccurrenceIndicator":154,"t_item":155,"FunctionTest":156,"MapTest":157,"ArrayTest":158,"ParenthesizedItemType":159,"DocumentTest":160,"ElementTest":161,"AttributeTest":162,"PITest":163,"CommentTest":164,"TextTest":165,"NamespaceNodeTest":166,"AnyKindTest":167,"t_document-node":168,"t_text":169,"t_comment":170,"t_namespace-node":171,"t_processing-instruction":172,"AttribNameOrWildcard":173,"t_element":174,"AnyFunctionTest":175,"TypedFunctionTest":176,"TypedFunctionTest_recursivo":177,"AnyArrayTest":178,"TypedArrayTest":179,"QName":180,"PrefixedName":181,"UnprefixedName":182,"Prefix":183,"LocalPart":184,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"t_llave_izquierda",10:"t_llave_derecha",13:"t_coma",16:"t_if",17:"t_parentesis_izquierdo",18:"t_parentesis_derecho",19:"t_then",20:"t_else",23:"t_or",26:"t_and",33:"t_doble_barra",34:"t_barra",36:"t_to",39:"t_suma",40:"t_resta",43:"t_multiplicacion",44:"t_div",45:"t_idiv",46:"t_mod",50:"t_instance",51:"t_of",54:"t_treat",55:"t_as",60:"t_igual",61:"t_mayor_que",67:"t_diferente",68:"t_menor_que",69:"t_eq",70:"t_ne",71:"t_lt",72:"t_le",73:"t_gt",74:"t_ge",75:"t_is",78:"t_diagonal",79:"t_doble_diagonal",91:"t_child",92:"t_doble_dos_puntos",93:"t_descendant",94:"t_attribute",95:"t_self",96:"t_descendant-or-self",97:"t_following-sibling",98:"t_following",99:"t_namespace",100:"t_arroba",103:"t_parent",104:"t_ancestor",105:"t_preceding_sibling",106:"t_preceding",107:"t_ancestor_or_self",108:"t_doble_punto",111:"StringLiteral",114:"t_dos_puntos",115:"t_node",122:"t_corchete_izquierdo",123:"t_comilla",124:"t_corchete_derecho",125:"t_comillas",126:"t_interrogacion",128:"IntegerLiteral",138:"DecimalLiteral",139:"t_dolar",141:"t_punto",144:"t_function",145:"t_map",151:"t_array",152:"t_empty-sequence",155:"t_item",168:"t_document-node",169:"t_text",170:"t_comment",171:"t_namespace-node",172:"t_processing-instruction",174:"t_element"},
productions_: [0,[3,2],[4,1],[7,1],[8,3],[8,2],[6,2],[11,1],[11,2],[11,0],[12,1],[12,1],[14,8],[15,2],[22,1],[22,2],[22,0],[21,2],[25,1],[25,2],[25,0],[24,3],[24,3],[24,3],[24,1],[27,2],[32,1],[32,2],[32,2],[32,0],[31,3],[31,1],[35,2],[38,1],[38,2],[38,2],[38,0],[37,2],[42,1],[42,2],[42,2],[42,2],[42,2],[42,0],[41,1],[47,1],[48,4],[48,1],[49,4],[49,1],[53,1],[56,1],[57,2],[59,1],[59,4],[59,0],[58,2],[64,1],[64,1],[64,1],[64,0],[65,1],[29,1],[29,2],[29,1],[29,2],[29,1],[29,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,1],[30,2],[30,2],[66,2],[77,1],[77,2],[77,0],[76,1],[76,1],[76,1],[80,2],[80,1],[81,0],[81,2],[81,2],[81,1],[82,1],[82,1],[84,2],[84,2],[87,2],[87,1],[88,2],[88,2],[88,2],[88,2],[88,2],[88,2],[88,2],[88,2],[90,2],[90,1],[85,2],[85,1],[101,2],[101,2],[101,2],[101,2],[101,2],[102,1],[102,1],[89,1],[89,1],[110,1],[110,1],[112,1],[112,3],[112,3],[112,2],[112,3],[83,2],[117,1],[117,1],[117,1],[117,1],[117,0],[63,4],[63,2],[121,1],[121,2],[121,0],[86,2],[86,0],[118,7],[118,7],[118,7],[118,7],[118,3],[118,4],[118,8],[118,8],[118,8],[118,8],[118,8],[118,8],[118,8],[118,8],[119,2],[127,1],[127,1],[127,1],[127,1],[62,1],[62,1],[62,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[131,1],[131,1],[137,1],[137,1],[130,2],[140,1],[129,3],[129,2],[132,1],[120,1],[120,1],[142,1],[133,1],[143,6],[143,4],[134,5],[134,3],[147,1],[147,2],[147,0],[146,3],[135,1],[135,1],[148,4],[148,2],[150,1],[150,2],[150,0],[149,2],[136,2],[52,3],[52,2],[52,1],[154,1],[154,1],[154,1],[153,1],[153,3],[153,1],[153,1],[153,1],[153,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[167,3],[160,4],[160,3],[165,3],[164,3],[166,3],[163,4],[163,3],[162,4],[162,3],[173,1],[161,3],[156,1],[156,1],[175,4],[176,7],[176,5],[177,1],[177,2],[177,0],[157,4],[158,1],[158,1],[178,4],[179,4],[159,3],[180,1],[180,1],[180,1],[181,3],[182,1],[183,1],[184,1],[113,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        var root = new AST_XPATH($$[$0-1]);
        return root; 
    
break;
case 2:
this.$ = new Expresion($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 3: case 56: case 89: case 159: case 160: case 161: case 163: case 164: case 165: case 166: case 199: case 203: case 247: case 248: case 249: case 250:
 this.$ = $$[$0]; 
break;
case 4:
 this.$ = $$[$0-1]; 
break;
case 25: case 122:
 this.$ = $$[$0-1] + $$[$0] ;
break;
case 81: case 82: case 83: case 117: case 118: case 125: case 126: case 127: case 128: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 167: case 168: case 169: case 170: case 172: case 175: case 176: case 177: case 178: case 179: case 184: case 188: case 189: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 227: case 229: case 230: case 234: case 238: case 239: case 243: case 244: case 245:
this.$=$$[$0];
break;
case 84:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 85:
 this.$ = [$$[$0]]; 
break;
case 87: case 88: case 92: case 93: case 124: case 135:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 94: case 96: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 106: case 108: case 109: case 110: case 111: case 112:
this.$ =  $$[$0-1] + $$[$0]  ;
break;
case 97:
this.$ =  $$[$0-1] + $$[$0] ;
break;
case 120: case 121: case 123:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] ;
break;
case 130: case 223: case 231:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 131:
 $$[$0-1] + $$[$0]; 
break;
case 137: case 138: case 139: case 140:
 this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] +$$[$0-2] + $$[$0-1] +$$[$0] ; 
break;
case 141: case 173: case 217: case 219: case 220: case 221: case 222: case 224: case 226: case 228:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] ; 
break;
case 142:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] ; 
break;
case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150:
 this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] +$$[$0-3] + $$[$0-2] +$$[$0-1] +$$[$0] ; 
break;
case 162:
 this.$ = "."; 
break;
case 171: case 174:
 this.$ = $$[$0-1] + $$[$0] ; 
break;
case 185: case 235:
this.$=$$[$0-1];
break;
case 218:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] ; 
break;
case 225:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] +$$[$0]; 
break;
}
},
table: [o([5,16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V0,{3:1,4:2,6:3,11:4,13:$V1}),{1:[3]},{5:[1,6]},{5:[2,2]},o($V2,[2,7],{12:7,14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,16:$V3,39:$V4,40:$V5}),o($V2,$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:28,16:$V3,39:$V4,40:$V5}),{1:[2,1]},o([5,10,18,60,123,124,125],[2,6]),o($V7,[2,10]),o($V7,[2,11]),{17:[1,29]},o([5,10,13,16,17,18,20,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,16],{22:30,23:[1,31]}),o([5,10,13,16,17,18,20,23,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,20],{25:32,26:[1,33]}),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,24],{28:34,29:35,30:36,60:[1,43],61:[1,46],67:[1,44],68:[1,45],69:[1,37],70:[1,38],71:[1,39],72:[1,40],73:[1,41],74:[1,42],75:[1,47]}),o([5,10,13,16,17,18,20,23,26,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,29],{32:48,33:[1,49],34:[1,50]}),o([5,10,13,16,17,18,20,23,26,33,34,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,31],{36:[1,51]}),o($V8,[2,36],{38:52,39:[1,53],40:[1,54]}),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,43],{42:55,43:[1,56],44:[1,57],45:[1,58],46:[1,59]}),o($V7,[2,44]),o($V7,[2,45]),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,47],{50:[1,60]}),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,49],{54:[1,61]}),o($V7,[2,50]),o($V7,[2,51]),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,55],{59:62,60:[1,63]}),o($V9,[2,57],{65:64,66:65,76:66,80:69,81:70,82:71,83:72,84:73,116:74,85:75,87:76,131:77,130:78,129:79,132:80,133:81,134:82,135:83,136:84,101:85,102:86,88:87,90:88,137:89,143:94,148:96,149:97,89:114,109:120,110:121,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,112:130,113:139,17:$Va,43:$Vb,78:$Vc,79:$Vd,91:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,107:$Vr,108:$Vs,111:$Vt,115:$Vu,122:$Vv,126:$Vw,128:$Vx,138:$Vy,139:$Vz,141:$VA,144:$VB,145:$VC,151:$VD,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ}),o($V7,[2,58]),o($V7,[2,59]),o([5,10,16,17,18,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,8]),o([16,17,18,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V0,{11:4,6:140,13:$V1}),o($V7,[2,13]),o($V8,$V6,{24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,21:141,39:$V4,40:$V5}),o($V7,[2,17]),o($V8,$V6,{27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,24:142,39:$V4,40:$V5}),o($V8,$V6,{31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,27:143,39:$V4,40:$V5}),o($V8,$V6,{31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,27:144,39:$V4,40:$V5}),o($V8,$V6,{31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,27:145,39:$V4,40:$V5}),o($V7,[2,68]),o($V7,[2,69]),o($V7,[2,70]),o($V7,[2,71]),o($V7,[2,72]),o($V7,[2,73]),o($V7,[2,62]),{60:[1,146]},o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,61,67,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,64],{60:[1,147],68:[1,148]}),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,66],{60:[1,149],61:[1,150]}),o($V7,[2,74]),o($V7,[2,25]),o($V8,$V6,{35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,31:151,39:$V4,40:$V5}),o($V8,$V6,{35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,31:152,39:$V4,40:$V5}),o($V8,$V6,{37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,35:153,39:$V4,40:$V5}),o($V7,[2,32]),o($V8,$V6,{41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,37:154,39:$V4,40:$V5}),o($V8,$V6,{41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,37:155,39:$V4,40:$V5}),o($V7,[2,37]),o($V8,$V6,{47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,41:156,39:$V4,40:$V5}),o($V8,$V6,{47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,41:157,39:$V4,40:$V5}),o($V8,$V6,{47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,41:158,39:$V4,40:$V5}),o($V8,$V6,{47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,41:159,39:$V4,40:$V5}),{51:[1,160]},{55:[1,161]},o($V7,[2,52]),{61:[1,162]},o($V7,[2,56]),o($V7,[2,61]),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,80],{77:163,67:[1,164]}),o([5,10,13,16,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,114,123,124,125],[2,81],{83:72,84:73,116:74,85:75,87:76,131:77,130:78,129:79,132:80,133:81,134:82,135:83,136:84,101:85,102:86,88:87,90:88,137:89,143:94,148:96,149:97,89:114,109:120,110:121,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,112:130,113:139,82:165,17:$Va,91:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,107:$Vr,108:$Vs,111:$Vt,115:$Vu,122:$Vv,126:$Vw,128:$Vx,138:$Vy,139:$Vz,141:$VA,144:$VB,145:$VC,151:$VD,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ}),o([5,10,13,16,18,20,23,26,33,34,36,39,40,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,114,123,124,125],[2,82],{83:72,84:73,116:74,85:75,87:76,131:77,130:78,129:79,132:80,133:81,134:82,135:83,136:84,101:85,102:86,88:87,90:88,137:89,143:94,148:96,149:97,89:114,109:120,110:121,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,112:130,113:139,82:166,17:$Va,43:$Vb,91:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,107:$Vr,108:$Vs,111:$Vt,115:$Vu,122:$Vv,126:$Vw,128:$Vx,138:$Vy,139:$Vz,141:$VA,144:$VB,145:$VC,151:$VD,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ}),o($V9,[2,83],{82:71,83:72,84:73,116:74,85:75,87:76,131:77,130:78,129:79,132:80,133:81,134:82,135:83,136:84,101:85,102:86,88:87,90:88,137:89,143:94,148:96,149:97,89:114,109:120,110:121,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,112:130,113:139,81:167,17:$Va,43:$Vb,78:[1,168],79:[1,169],91:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,107:$Vr,108:$Vs,111:$Vt,115:$Vu,122:$Vv,126:$Vw,128:$Vx,138:$Vy,139:$Vz,141:$VA,144:$VB,145:$VC,151:$VD,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ}),o($V7,[2,85]),o($V7,[2,89]),o($V7,[2,90]),o($V7,[2,91]),o([5,10,13,16,18,20,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,123,124,125,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,129],{117:170,118:171,63:172,119:173,17:$VK,122:$VL,126:[1,176]}),o($V7,$VM,{86:177}),o($V7,$VM,{86:178}),o($V7,[2,159]),o($V7,[2,160]),o($V7,[2,161]),o($V7,[2,162]),o($V7,[2,163]),o($V7,[2,164]),o($V7,[2,165]),o($V7,[2,166]),{43:$Vb,89:179,94:$VN,100:$VO,109:120,110:121,111:$VP,112:130,113:139,115:$Vu,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ},o($V7,[2,107]),{43:$Vb,89:183,94:$VN,100:$VO,109:120,110:121,111:$VP,112:130,113:139,115:$Vu,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ},o($V7,[2,95]),o($V7,[2,167]),o($V7,[2,168]),{111:[1,185],140:184},o($VQ,$V0,{11:4,6:186,13:$V1,18:[1,187]}),o($V7,[2,175]),o($V7,[2,179]),{9:[1,188]},o($V7,[2,188]),o($V7,[2,189]),{17:$Va,43:$VR,111:$VS,113:190,127:189,128:$VT,129:192},{92:[1,195]},{92:[1,196]},{92:[1,197]},{92:[1,198]},{92:[1,199]},o($V7,[2,113]),o([5,10,13,16,17,18,20,23,26,33,34,36,39,40,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,95,96,97,98,99,103,104,105,106,107,108,114,122,123,124,125,126,128,138,139,141,144,145,151],[2,114],{109:120,110:121,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,112:130,113:139,89:200,43:[1,201],94:$VN,100:$VO,111:$VP,115:$Vu,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ}),{92:[1,202]},{92:[1,203]},{17:$VU,92:[1,204]},{92:[1,206]},{92:[1,207]},{92:[1,208]},{92:[1,209]},{92:[1,210]},o($V7,[2,105]),o($V7,[2,169]),o($V7,[2,170]),{17:[1,211]},o([13,17,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:212,16:$V3,39:$V4,40:$V5,124:[1,213]}),{8:214,9:$VV},o($V7,[2,115]),o($V7,[2,116]),o($VW,[2,209]),o($VW,[2,210]),o($VW,[2,211]),o($VW,[2,212]),o($VW,[2,213]),o($VW,[2,214]),o($VW,[2,215]),o($VW,[2,216]),o($V7,[2,118]),{17:[1,216]},{17:[1,217]},{17:[1,218]},{17:[1,219]},{17:[1,220]},{17:[1,221]},{17:[1,222]},o($VX,[2,119],{114:$VY}),{114:[1,224]},{18:[1,225]},o($V7,[2,15]),o($V7,[2,19]),o($V7,[2,21]),o($V7,[2,22]),o($V7,[2,23]),o($V7,[2,63]),o($V7,[2,65]),o($V7,[2,75]),o($V7,[2,67]),o($V7,[2,76]),o($V7,[2,27]),o($V7,[2,28]),o($V7,[2,30]),o($V7,[2,34]),o($V7,[2,35]),o($V7,[2,39]),o($V7,[2,40]),o($V7,[2,41]),o($V7,[2,42]),{17:$VZ,52:226,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},{17:$VZ,52:244,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},{17:$Va,62:245,111:[1,246],129:247,130:248,139:$Vz},o($V7,[2,77]),o($V9,[2,86],{80:69,81:70,82:71,83:72,84:73,116:74,85:75,87:76,131:77,130:78,129:79,132:80,133:81,134:82,135:83,136:84,101:85,102:86,88:87,90:88,137:89,143:94,148:96,149:97,89:114,109:120,110:121,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,112:130,113:139,76:249,17:$Va,43:$Vb,78:$Vc,79:$Vd,91:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,107:$Vr,108:$Vs,111:$Vt,115:$Vu,122:$Vv,126:$Vw,128:$Vx,138:$Vy,139:$Vz,141:$VA,144:$VB,145:$VC,151:$VD,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ}),o($V7,[2,87]),o($V7,[2,88]),o($V7,[2,84]),{17:$Va,43:$Vb,82:165,83:72,84:73,85:75,87:76,88:87,89:114,90:88,91:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:85,102:86,103:$Vn,104:$Vo,105:$Vp,106:$Vq,107:$Vr,108:$Vs,109:120,110:121,111:$Vt,112:130,113:139,115:$Vu,116:74,122:$Vv,126:$Vw,128:$Vx,129:79,130:78,131:77,132:80,133:81,134:82,135:83,136:84,137:89,138:$Vy,139:$Vz,141:$VA,143:94,144:$VB,145:$VC,148:96,149:97,151:$VD,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ},{17:$Va,43:$Vb,82:166,83:72,84:73,85:75,87:76,88:87,89:114,90:88,91:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:85,102:86,103:$Vn,104:$Vo,105:$Vp,106:$Vq,107:$Vr,108:$Vs,109:120,110:121,111:$Vt,112:130,113:139,115:$Vu,116:74,122:$Vv,126:$Vw,128:$Vx,129:79,130:78,131:77,132:80,133:81,134:82,135:83,136:84,137:89,138:$Vy,139:$Vz,141:$VA,143:94,144:$VB,145:$VC,148:96,149:97,151:$VD,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ},o($V7,[2,124]),o($V7,[2,126]),o($V7,[2,127]),o($V7,[2,128]),o([16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,103,104,105,106,107,108,115,122,124,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V0,{11:4,6:251,13:$V1,100:[1,252],111:[1,250]}),o([13,17,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,128,138,139,141,144,145,151,168,169,170,171,172,174],$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,120:253,12:255,142:256,16:$V3,18:[1,254],39:$V4,40:$V5,126:$V41}),{17:$Va,43:$VR,111:$VS,113:190,127:258,128:$VT,129:192},o($V51,[2,92],{118:259,122:$VL}),o($V51,[2,93],{118:259,122:$VL}),o($V7,[2,106]),o($V7,[2,117]),{17:$VU},{43:[1,260]},o($V7,[2,94]),o($V7,[2,171]),o($V7,[2,172]),{18:[1,261]},o($V7,[2,174]),o($V61,$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,146:262,12:264,10:[1,263],16:$V3,39:$V4,40:$V5}),o($V7,[2,196]),o($V7,[2,152]),o($V7,[2,153]),o($V7,[2,154]),o($V7,[2,155]),o($V7,[2,250]),o($V71,[2,108]),o($V71,[2,109]),o($V71,[2,110]),o($V71,[2,111]),o($V71,[2,112]),o($V7,[2,104]),o($VX,$V81,{114:$VY}),o($V71,[2,96]),o($V71,[2,97]),o($V71,[2,98]),{18:[1,266],43:[1,267],173:265},o($V71,[2,99]),o($V71,[2,100]),o($V71,[2,101]),o($V71,[2,102]),o($V71,[2,103]),{18:[1,268]},{13:[1,270],124:[2,194],150:269},o($V7,[2,191]),o($V7,[2,195]),o($VQ,$V0,{11:4,6:271,10:[1,272],13:$V1}),{18:[1,274],161:273,174:$VJ},{18:[1,275]},{18:[1,277],111:[1,276]},{18:[1,278]},{18:[1,279]},{18:[1,280]},{18:[1,281]},{111:$VS,113:282},{43:[1,283]},{19:[1,284]},o($V7,[2,46]),{17:[1,285]},o([5,9,10,13,16,17,18,20,23,26,33,34,36,40,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,128,138,139,141,144,145,151,168,169,170,171,172,174],[2,199],{154:286,39:[1,289],43:[1,288],126:[1,287]}),o($VW,[2,203]),{17:[1,290]},o($VW,[2,205]),o($VW,[2,206]),o($VW,[2,207]),o($VW,[2,208]),o($VW,[2,229]),o($VW,[2,230]),{17:[1,291]},o($VW,[2,238]),o($VW,[2,239]),{17:$VZ,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,153:292,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},{17:[1,293]},{17:[1,294]},{17:[1,295]},o($V7,[2,48]),{17:$VK,63:296},{17:[2,156]},{17:[2,157]},{17:[2,158]},o($V7,[2,79]),{60:[1,297]},{60:[1,298],124:[1,299]},o([16,17,23,26,33,34,36,39,40,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,115,122,124,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V0,{11:4,6:300,13:$V1,111:[1,301]}),{13:[1,303],18:[2,134],121:302},o($V7,[2,131]),o($V91,[2,176]),o($V91,[2,177]),o($V91,[2,178]),o($V7,[2,151]),o($V7,[2,135]),o($V7,$V81),o($V7,[2,173]),{10:[2,186],13:[1,305],147:304},o($V7,[2,183]),{114:[1,306]},{18:[1,307]},o($VW,[2,226]),{18:[2,227]},{7:309,8:310,9:$VV,55:[1,308]},{124:[1,311]},o([17,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,124,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:312,16:$V3,39:$V4,40:$V5}),{10:[1,313]},o($V7,[2,5]),{18:[1,314]},o($VW,[2,219]),o($VW,[2,228]),{18:[1,315]},o($VW,[2,224]),o($VW,[2,221]),o($VW,[2,220]),o($VW,[2,222]),o($V7,$Va1),o($V7,[2,121]),o($V7,[2,120]),o([17,20,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:316,16:$V3,39:$V4,40:$V5}),{18:[1,317]},o($VW,[2,198]),o($VW,[2,200]),o($VW,[2,201]),o($VW,[2,202]),{18:[1,318]},{43:[1,319]},{18:[1,320]},{18:[1,321]},{17:$VZ,18:[1,324],43:[1,322],52:323,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},{17:$VZ,43:[1,325],52:326,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},o($V7,[2,54]),{123:[1,327],125:[1,328]},{123:[1,329],125:[1,330]},o($V7,[2,141]),{60:[1,332],124:[1,331]},{60:[1,333]},{18:[1,334]},o([17,18,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,128,138,139,141,144,145,151,168,169,170,171,172,174],$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:255,142:256,120:335,16:$V3,39:$V4,40:$V5,126:$V41}),{10:[1,336]},o($V61,$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:264,146:337,16:$V3,39:$V4,40:$V5}),o([10,13,17,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,115,122,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:338,16:$V3,39:$V4,40:$V5}),o($VW,[2,225]),{17:$VZ,52:339,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},o($V7,[2,181]),o($V7,[2,3]),o($V7,[2,190]),{124:[2,193]},o($V7,[2,4]),o($VW,[2,218]),o($VW,[2,223]),{20:[1,340]},o($VW,[2,197]),o($VW,[2,204]),{18:[1,341]},o($VW,[2,242]),o($VW,$Va1),{18:[1,342]},{13:[1,344],18:[2,236],177:343},{55:[1,345]},{18:[1,346]},{18:[1,347]},o($Vb1,$V0,{11:4,6:348,13:$V1}),o($Vc1,$V0,{11:4,6:349,13:$V1}),o($Vb1,$V0,{11:4,6:350,13:$V1}),o($Vc1,$V0,{11:4,6:351,13:$V1}),o($V7,[2,142]),{123:[1,352],125:[1,353]},{123:[1,354],125:[1,355]},o($V7,[2,130]),{18:[2,133]},o($V7,[2,182]),{10:[2,185]},o([10,13],[2,187]),{7:356,8:310,9:$VV},o([5,10,13,17,18,20,23,26,33,34,36,43,44,45,46,50,54,60,61,67,68,69,70,71,72,73,74,75,78,79,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,111,114,115,122,123,124,125,126,128,138,139,141,144,145,151,168,169,170,171,172,174],$V6,{14:8,15:9,21:11,24:12,27:13,31:14,35:15,37:16,41:17,47:18,48:19,49:20,53:21,56:22,57:23,58:24,64:25,12:357,16:$V3,39:$V4,40:$V5}),o($VW,[2,237]),o($VW,[2,231]),{18:[1,358]},{17:$VZ,52:359,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},{17:$VZ,52:360,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},o($VW,[2,240]),o($VW,[2,241]),{123:[1,361]},{125:[1,362]},{123:[1,363]},{125:[1,364]},o($Vd1,$V0,{11:4,6:366,13:$V1,111:[1,365]}),o($Ve1,$V0,{11:4,6:367,13:$V1,111:[1,368]}),o($Vd1,$V0,{11:4,6:370,13:$V1,111:[1,369]}),o($Ve1,$V0,{11:4,6:371,13:$V1,111:[1,372]}),o($V7,[2,180]),o($V7,[2,12]),{55:[1,373]},{18:[2,235]},o($VW,[2,233]),{124:[1,374]},{124:[1,375]},{124:[1,376]},{124:[1,377]},{123:[1,378]},{123:[1,379]},{125:[1,380]},{125:[1,381]},{123:[1,382]},{123:[1,383]},{125:[1,384]},{125:[1,385]},{17:$VZ,52:386,94:$VN,109:229,115:$V_,144:$V$,145:$V01,151:$V11,152:$V21,153:228,155:$V31,156:231,157:232,158:233,159:234,160:122,161:123,162:124,163:125,164:126,165:127,166:128,167:129,168:$VE,169:$VF,170:$VG,171:$VH,172:$VI,174:$VJ,175:235,176:236,178:238,179:239},o($V7,[2,137]),o($V7,[2,138]),o($V7,[2,139]),o($V7,[2,140]),{124:[1,387]},{124:[1,388]},{124:[1,389]},{124:[1,390]},{124:[1,391]},{124:[1,392]},{124:[1,393]},{124:[1,394]},o($VW,[2,232]),o($V7,[2,147]),o($V7,[2,149]),o($V7,[2,148]),o($V7,[2,150]),o($V7,[2,143]),o($V7,[2,145]),o($V7,[2,144]),o($V7,[2,146])],
defaultActions: {3:[2,2],6:[2,1],246:[2,156],247:[2,157],248:[2,158],267:[2,227],312:[2,193],335:[2,133],337:[2,185],359:[2,235]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    /*const { Nodo } = require("../dist/xpath/instrucciones/Nodo");   
    const { Expresion } = require("../dist/xpath/instrucciones/Expresion"); 
    const { Predicado } = require("../dist/xpath/instrucciones/Predicado");    
    const { Wildcard } = require("../dist/xpath/instrucciones/Wildcard");    
    const { Axes } = require("../dist/xpath/instrucciones/Axes");    
    const { AxesPredicado } = require("../dist/xpath/instrucciones/AxesPredicado");    
    const { AST_XPATH } = require("../dist/xpath/ast/AST_XPATH");  
    const { Error } = require("../dist/xpath/reportes/Error");  */

    var list_error = [];
     //REPORTE DE ERRORES
    function addError(tipo, descripcion, line, column) {
        let gramatica = new Error(tipo,descripcion,line,column);
        //list_error.push(error);
    }
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 13;
break;
case 1:return 't_for';
break;
case 2:return 't_let';
break;
case 3:return 't_some';
break;
case 4:return 't_every';
break;
case 5:return 16;
break;
case 6:return 23;
break;
case 7:return 26;
break;
case 8:return 69;
break;
case 9:return 70;
break;
case 10:return 71;
break;
case 11:return 72;
break;
case 12:return 73;
break;
case 13:return 74;
break;
case 14:return 60;
break;
case 15:return 67;
break;
case 16:return 68;
break;
case 17:return 61;
break;
case 18:return 75;
break;
case 19:return 92;
break;
case 20:return 33;
break;
case 21:return 34;
break;
case 22:return 36;
break;
case 23:return 39;
break;
case 24:return 40;
break;
case 25:return 43;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 46;
break;
case 29:return 't_union';
break;
case 30:return 't_except';
break;
case 31:return 50;
break;
case 32:return 51;
break;
case 33:return 54;
break;
case 34:return 55;
break;
case 35:return 't_castable';
break;
case 36:return 't_cast';
break;
case 37:return 79;
break;
case 38:return 78;
break;
case 39:return 114;
break;
case 40:return 108;
break;
case 41:return 141;
break;
case 42:return 100;
break;
case 43:return 122;
break;
case 44:return 124;
break;
case 45:return 17;
break;
case 46:return 18;
break;
case 47:return 9;
break;
case 48:return 10;
break;
case 49:return 125;
break;
case 50:return 123;
break;
case 51:return 139;
break;
case 52:return 't_modulo';
break;
case 53:return 't_numeral';
break;
case 54:return 't_return';
break;
case 55:return 't_in';
break;
case 56:return 't_satisfies';
break;
case 57:return 19;
break;
case 58:return 20;
break;
case 59:return 91;
break;
case 60:return 93;
break;
case 61:return 94;
break;
case 62:return 95;
break;
case 63:return 96;
break;
case 64:return 97;
break;
case 65:return 98;
break;
case 66:return 99;
break;
case 67:return 103;
break;
case 68:return 104;
break;
case 69:return 105;
break;
case 70:return 't_preceding-sibling';
break;
case 71:return 106;
break;
case 72:return 107;
break;
case 73:return 144;
break;
case 74:return 145;
break;
case 75:return 151;
break;
case 76:return 152;
break;
case 77:return 155;
break;
case 78:return 115;
break;
case 79:return 169;
break;
case 80:return 168;
break;
case 81:return 170;
break;
case 82:return 171;
break;
case 83:return 172;
break;
case 84:return 't_schema-attribute';
break;
case 85:return 174;
break;
case 86:return 't_schema-element';
break;
case 87:return 126;
break;
case 88:return 't_Q';
break;
case 89:return 't_doble_comillas';
break;
case 90:return 't_doble_comilla';
break;
case 91:return 't_not';
break;
case 92:return 138;
break;
case 93:return 128;
break;
case 94:return 111;
break;
case 95:return 5;
break;
case 96:  addError(`Error léxico`,`No se esperaba ${yy_.yytext}`,yy_.yylloc.first_line, yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+,)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:some\b)/,/^(?:every\b)/,/^(?:if\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:is\b)/,/^(?:::)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:to\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:idiv\b)/,/^(?:mod\b)/,/^(?:union\b)/,/^(?:except\b)/,/^(?:instance\b)/,/^(?:of\b)/,/^(?:treat\b)/,/^(?:as\b)/,/^(?:castable\b)/,/^(?:cast\b)/,/^(?:\/\/)/,/^(?:\/)/,/^(?::)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:")/,/^(?:')/,/^(?:\$)/,/^(?:%)/,/^(?:#)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:satisfies\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:attribute\b)/,/^(?:self\b)/,/^(?:descendant-or-self\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:ancestor\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:ancestor-or-self\b)/,/^(?:function\b)/,/^(?:map\b)/,/^(?:array\b)/,/^(?:empty-sequence\b)/,/^(?:item\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:document-node\b)/,/^(?:comment\b)/,/^(?:namespace-node\b)/,/^(?:processing-instruction\b)/,/^(?:schema-attribute\b)/,/^(?:element\b)/,/^(?:schema-element\b)/,/^(?:\?)/,/^(?:Q\b)/,/^(?:x\b)/,/^(?:y\b)/,/^(?:not\b)/,/^(?:(([0-9]+\.[0-9]+)|(\.\[0-9\]\+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_xpath;
exports.Parser = Grammar_xpath.Parser;
exports.parse = function () { return Grammar_xpath.parse.apply(Grammar_xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}